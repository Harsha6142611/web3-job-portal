const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const Resume = sequelize.define('Resume', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true
  },
  userId: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id'
    },
    onDelete: 'CASCADE'
  },
  fileName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  filePath: {
    type: DataTypes.STRING,
    allowNull: false
  },
  fileSize: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  mimeType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  extractedText: {
    type: DataTypes.TEXT
  },
  // AI-analyzed structured data
  analyzedData: {
    type: DataTypes.JSONB,
    defaultValue: {}
  },
  // Professional summary generated by AI
  summary: {
    type: DataTypes.TEXT
  },
  // Skills extracted and categorized
  skills: {
    type: DataTypes.JSONB,
    defaultValue: {}
  },
  // Work experience structured
  experience: {
    type: DataTypes.JSONB,
    defaultValue: []
  },
  // Education information
  education: {
    type: DataTypes.JSONB,
    defaultValue: []
  },
  // Contact information extracted
  contactInfo: {
    type: DataTypes.JSONB,
    defaultValue: {}
  },
  // Analysis metadata
  processingStatus: {
    type: DataTypes.ENUM('pending', 'processing', 'completed', 'failed'),
    defaultValue: 'pending'
  },
  processingError: {
    type: DataTypes.TEXT
  },
  analysisScore: {
    type: DataTypes.DECIMAL(3, 2)
  },
  // SEO and matching optimization
  keywords: {
    type: DataTypes.JSONB,
    defaultValue: []
  },
  industryTags: {
    type: DataTypes.JSONB,
    defaultValue: []
  },
  experienceLevel: {
    type: DataTypes.ENUM('entry', 'junior', 'mid', 'senior', 'lead', 'executive')
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
}, {
  tableName: 'resumes',
  timestamps: true,
  indexes: [
    {
      fields: ['userId']
    },
    {
      fields: ['processingStatus']
    },
    {
      fields: ['isActive']
    },
    {
      fields: ['userId', 'isActive']
    }
  ]
});

// Instance methods
Resume.prototype.toJSON = function() {
  const values = { ...this.get() };
  // Don't expose file path in API responses for security
  delete values.filePath;
  return values;
};

// Static methods
Resume.findByUserId = function(userId) {
  return this.findAll({
    where: { userId, isActive: true },
    order: [['createdAt', 'DESC']]
  });
};

Resume.findActiveByUserId = function(userId) {
  return this.findOne({
    where: { userId, isActive: true },
    order: [['createdAt', 'DESC']]
  });
};

module.exports = Resume;